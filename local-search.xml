<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>排序算法简明纲要</title>
    <link href="/2024/11/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/11/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>  本文介绍了十大经典排序算法，并给出了Java版本的代码样例。<span id="more"></span> <div class="note note-info">            <p>  排序是算法的基础和入门问题。在介绍排序算法之前，需要明确一个概念：排序是指把原本无序的数组，重新按照元素由小到大的升序进行排列。<br />  经典的十种排序方法，按照时间复杂度大体可以分为三类：平方，线性对数，线性。</p>          </div></p><blockquote><p>平方时间复杂度——最简单原始的比较型排序思想</p></blockquote><h2 id="冒泡排序bubble-sort">冒泡排序（Bubble Sort）</h2><div class="note note-warning">            <p>  每遍历一次数组，都会使得最大的元素“上浮”到数组最右端，类似于气泡上浮的过程，因此得名“冒泡排序”。</p>          </div><h3 id="操作">操作</h3><ul><li>首先从数组的第一个元素开始到数组最后一个元素为止，对数组中相邻的两个元素进行比较，如果位于数组左端的元素大于数组右端的元素，则交换这两个元素在数组中的位置。这样操作后数组最右端的元素即为该数组中所有元素的最大值。</li><li>接着对该数组除最右端的 <span class="math inline">\(n-1\)</span>个元素进行同样的操作；</li><li>再接着对剩下的 <span class="math inline">\(n-2\)</span>个元素做同样的操作，直到整个数组有序排列。<br /></li></ul><h3 id="时空复杂度">时空复杂度</h3><p>  因为有两层循环，因此冒泡排序的平均时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  在最坏的情况（原数组为降序排列）下，时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>；在最好的情况下，时间复杂度为<span class="math inline">\(O(n)\)</span>。<br />  由于只需要在交换元素时使用常数复杂度的额外空间，所以冒泡排序的空间复杂度为<span class="math inline">\(O(1)\)</span> 。<br /></p><h3 id="稳定性">稳定性</h3><p>  冒泡排序是稳定的。也就是说，对于值相同元素，排序前后其原本相对位置不会发生变化。<br /></p><h3 id="代码样例">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        bubbleSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">while</span> (len != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[i + <span class="hljs-number">1</span>]) &#123;<br>                    nums[i] ^= nums[i + <span class="hljs-number">1</span>];<br>                    nums[i + <span class="hljs-number">1</span>] ^= nums[i];<br>                    nums[i] ^= nums[i + <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125;<br>            len--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序selection-sort">选择排序（Selection Sort）</h2><div class="note note-warning">            <p>  每完成一轮遍历，都选出了数组中最小的元素放到数组最左端。因此得名“选择排序”。</p>          </div><h3 id="操作-1">操作</h3><ul><li>先从 <span class="math inline">\(n\)</span>个数字中找到最小值<code>min1</code>，如果最小值<code>min1</code>的位置不在数组的最左端（也就是<code>min1</code>不等于<code>nums[0]</code>），则将最小值<code>min1</code>和<code>nums[0]</code>交换；</li><li>接着在剩下的 <span class="math inline">\(n-1\)</span>个数字中找到最小值<code>min2</code>，如果最小值<code>min2</code>不是<code>nums[1]</code>，则交换这两个数字；</li><li>依次类推，直到数组<code>nums</code>有序排列。<br /></li></ul><h3 id="时空复杂度-1">时空复杂度</h3><p>  由于有两层循环，因此选择排序的平均时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>。可知数据规模越小越好。<br />  在最坏和最好的的情况下，选择排序的时间复杂度都为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  由于只需要在交换元素时使用常数复杂度的额外空间，所以选择排序的空间复杂度为<span class="math inline">\(O(1)\)</span>。<br /></p><h3 id="稳定性-1">稳定性</h3><p>  选择排序是不稳定的。<br /></p><h3 id="代码样例-1">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        selectionSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (minIndex != i) &#123;<br>                nums[minIndex] ^= nums[i];<br>                nums[i] ^= nums[minIndex];<br>                nums[minIndex] ^= nums[i];<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序insertion-sort">插入排序（Insertion Sort）</h2><div class="note note-warning">            <p>  每次给“无序”序列的首元素在“有序”序列中寻找位置并插入的过程，类似于扑克牌构建牌型，得名“插入排序”。</p>          </div><h3 id="操作-2">操作</h3><p>  通过构建有序序列，对于未排序数据，在已排序序列中<strong>从后向前</strong>扫描，找到相应位置并插入。</p><ul><li>认为<code>nums[0]</code>是有序的，而后续所有元素处于无序状态。从<code>nums[1]</code>开始，从后往前与有序序列比较，找到合适的位置插入。有序序列长度+1。</li><li>依次处理<code>nums[2]</code>、<code>nums[3]</code>、···，直到最后一个元素。</li></ul><h3 id="时空复杂度-2">时空复杂度</h3><p>  由于每次给“无序”序列中的首元素在“有序”序列中找位置并插入都需要对“有序”数组进行遍历，所以相当于外层遍历无序数组而内层遍历有序数组，因此插入排序的时间复杂度为<span class="math inline">\(O(n^{2})\)</span>。<br />  在最坏的情况下，时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>；在最好的情况下，时间复杂度优化为<span class="math inline">\(O(n)\)</span>。<br />  由于每轮遍历只需要用常数复杂度的额外空间记录插入元素，因此插入排序的空间复杂度为<span class="math inline">\(O(1)\)</span>。<br /></p><h3 id="代码样例-2">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        insertionSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-comment">// 遍历无序序列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-comment">// 拿无序元素从后往前与有序元素比较，在合适的位置插入</span><br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; key &lt; nums[j]) &#123;<br>                nums[j + <span class="hljs-number">1</span>] = nums[j];<br>                j--;<br>            &#125;<br>            nums[j + <span class="hljs-number">1</span>] = key;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="希尔排序shells-sort插入排序的升级版">希尔排序（Shell'sSort）——插入排序的升级版</h2><h3 id="操作-3">操作</h3><p>  先将待排序列分割成为若干子序列分别进行插入排序，待整个序列中的记录"基本有序"时，再对全体进行一次直接插入排序。<br />  也就是说，选定一组降序<code>gap</code>序列，其最后一个元素为1，每一轮都对数组进行分组插入排序。随着<code>gap</code>值越来越小，数组越来越接近有序。最后<code>gap = 1</code>，即插入排序，此时效率非常高。<br /></p><h3 id="时间复杂度">时间复杂度</h3><p>  希尔排序的时间复杂度随<code>gap</code>序列的选择而有所差异。当<span class="math inline">\(n\rightarrow\infty\)</span>时，时间复杂度趋于 <span class="math inline">\(O(n (\logn)^{2})\)</span>。<br />  希尔排序虽然是插入排序的优化，但其效率只略低于快速排序和堆排序，而显著高于插入排序（插入排序效率又远高于冒泡排序）。</p><h3 id="稳定性-2">稳定性</h3><p>  希尔排序是不稳定的。<br /></p><h3 id="代码样例-3">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        shellsSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellsSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">increasement</span> <span class="hljs-operator">=</span> len;<br>        <span class="hljs-comment">// 最外层循环控制增量</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            increasement = increasement / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 外层for循环用于遍历每一组的首元素，即生成每一组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; increasement; i++) &#123;<br>                <span class="hljs-comment">// 内层for循环用于对每一组进行插入排序</span><br>                <span class="hljs-comment">// 以下循环当increasement = 1时就是插入排序的代码。</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + increasement; j &lt; len; j += increasement) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[j] &lt; nums[j - increasement]) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j - increasement;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> nums[j];<br>                        <span class="hljs-keyword">while</span> (k &gt;= <span class="hljs-number">0</span> &amp;&amp; key &lt; nums[k]) &#123;<br>                            nums[k + increasement] = nums[k];<br>                            k -= increasement;<br>                        &#125;<br>                        nums[k + increasement] = key;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (increasement &gt; <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线性对数时间复杂度——引入分治思想的比较式排序</p></blockquote><h2 id="归并排序merge-sort">归并排序（Merge Sort）</h2><div class="note note-warning">            <p>  采用先分再合的思想，因此得名“归并排序”。</p>          </div><h3 id="操作-4">操作</h3><p>  首先把长度为 <span class="math inline">\(n\)</span>的输入序列分成两个长度为 <spanclass="math inline">\(\dfrac{n}{2}\)</span>的子序列；然后对这两个子序列分别采用归并排序；最终将两个排序好的子序列合并成一个最终的排序序列。<br /></p><h3 id="时空复杂度-3">时空复杂度</h3><p>  由于采用了分治思想（二分），所以平均时间复杂度为 <spanclass="math inline">\(O(n\log n)\)</span>。<br />  在最好和最坏情况下，归并排序的时间复杂度都是 <spanclass="math inline">\(O(n\log n)\)</span>。<br />  需要使用与原始数组相同大小的额外空间，所以空间复杂度为 <spanclass="math inline">\(O(n)\)</span>。<br /></p><h3 id="稳定性-3">稳定性</h3><p>  归并排序是稳定的。<br /></p><h3 id="代码样例-4">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        mergeSort(nums, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 递归方法处理</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>        mergeSort(nums, start, mid);<br>        mergeSort(nums, mid + <span class="hljs-number">1</span>, end);<br>        <br>        <span class="hljs-comment">// 合并两个已经分别排好序的数组</span><br>        <span class="hljs-type">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[end - start + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i_start</span> <span class="hljs-operator">=</span> start, i_end = mid;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j_start</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>, j_end = end;<br>        <span class="hljs-comment">// 比较两个数组的首元素，按升序填入临时数组</span><br>        <span class="hljs-keyword">while</span> (i_start &lt;= i_end &amp;&amp; j_start &lt;= j_end) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i_start] &lt; nums[j_start]) &#123;<br>                temp[k] = nums[i_start];<br>                i_start++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[k] = nums[j_start];<br>                j_start++;<br>            &#125;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 一般而言两个数组长度不同，所以总有一个会剩下一部分元素，直接补在temp后面</span><br>        <span class="hljs-keyword">while</span> (i_start &lt;= i_end) &#123;<br>            temp[k] = nums[i_start];<br>            i_start++;<br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j_start &lt;= j_end) &#123;<br>            temp[k] = nums[j_start];<br>            j_start++;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 把temp的结果放回原数组nums</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            nums[i + start] = temp[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序quick-sort">快速排序（Quick Sort）</h2><div class="note note-warning">            <p>  “快速排序”，顾名思义，其速度比同等复杂度的其他排序算法都快！</p>          </div><h3 id="操作-5">操作</h3><p>  通过一趟排序将待排数据分割成独立的两部分，其中一部分数据均比另一部分数据小，则可分别对这两部分数据继续进行排序，从而达到整个序列有序。<br />  一趟快速排序的具体过程可描述为：从待排序列中任意选取一个数据（通常选取第一个数据）作为基准值，然后将序列中比它小的数据都安置在它的位置之前，将比它大的数据都安置在它的位置之后。这样，以该基准值为分界线，将待排序列分成的两个子序列。<br />  递归处理这两段子序列。</p><h3 id="时空复杂度-4">时空复杂度</h3><p>  由于使用了二分思想，快速排序的时间复杂度为 <spanclass="math inline">\(O(n\logn)\)</span>。是排序大数据的最快方法之一。<br />  在最好的情况下，快速排序的时间复杂度为 <span class="math inline">\(O(n\log n)\)</span>；但在最坏的情况下时间复杂度会退化为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  由于递归造成的栈空间使用，需要递归 <span class="math inline">\(\logn\)</span> 次则快速排序的平均空间复杂度为 <spanclass="math inline">\(O(\log n)\)</span>。<br /></p><h3 id="稳定性-4">稳定性</h3><p>  快速排序是不稳定的。</p><h3 id="代码样例-5">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        quickSort(nums, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> nums[start];<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start, j = end;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 从右向左寻找比pivot小的数</span><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= pivot) j--;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123; <span class="hljs-comment">// 如果找到了，就把这个数放到左边</span><br>                nums[i] = nums[j];<br>                i++;<br>            &#125;<br>            <br>            <span class="hljs-comment">// 从左往右寻找比pivot大的数</span><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt; pivot) i++;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123; <span class="hljs-comment">// 如果找到了，就把这个数放到右边</span><br>                nums[j] = nums[i];<br>                j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 外层while循环会当i == j时终止。一轮之后，基准值找到了位置</span><br>        nums[i] = pivot;<br>        <br>        <span class="hljs-comment">// 递归处理两边的子数组</span><br>        quickSort(nums, start, i - <span class="hljs-number">1</span>);<br>        quickSort(nums, i + <span class="hljs-number">1</span>, end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序heap-sort选择排序的升级版">堆排序（HeapSort）——选择排序的升级版</h2><div class="note note-warning">            <p>  由于借助了堆这种数据结构，因此得名“堆排序”。</p>          </div><div class="note note-info">            <p><strong>堆</strong></p><p>  堆是一种完全二叉树，每个节点的值都大于等于（或者都小于等于）其子节点的值。前者称为大根堆，后者称为小根堆。<br />  排升序需要建立大根堆，排降序需要建立小根堆。<br /></p><p><strong>完全二叉树的父节点和子节点的索引之间的关系</strong></p><ul><li><code>parent = (child - 1) / 2;</code></li><li><code>left = parent * 2 + 1;</code></li><li><code>right = parent * 2 + 2;</code></li><li><code>right = left + 1;</code></li></ul><p><strong>上滤和下滤</strong></p><p>  以大根堆为例，对不符合堆序性的节点有上滤和下滤两种操作：</p><ul><li>上滤：节点与其父节点比较：若大于父节点，则交换，重复此过程直到根节点。</li><li>下滤：节点与其左右孩子中较大者比较：若小于孩子，则交换，重复此过程直到叶子节点。</li></ul><p>  上滤和下滤的时间复杂度都是 <span class="math inline">\(O(\logn)\)</span>。</p><p><strong>向下建堆法</strong></p><p>  按照数组顺序依次把新元素插入到完全二叉树的末尾，每插入一个元素都要对树进行上滤操作从而保证堆序性。当插入完所有元素后，就自然构成了堆。<br />  因为每次插入新元素都需要上滤，所以第 <spanclass="math inline">\(i\)</span> 层的单个节点的上滤次数最多为 <spanclass="math inline">\(i - 1\)</span>，而第 <spanclass="math inline">\(i\)</span> 层最多有 <spanclass="math inline">\(2^{i - 1}\)</span>个节点。经过数列求和计算出向下建堆法的时间复杂度为 <spanclass="math inline">\(O(n \log n)\)</span>。<br /><span class="math display">\[\sum_{i=2}^{h} 2^{i-1}(i-1)=O(n \logn)\]</span>，其中 <span class="math inline">\(h = \log n +1\)</span>。</p><p><strong>向上建堆法</strong></p><p>  首先把乱序数组直接建成完全二叉树，然后从最后一个非叶子节点开始进行下滤操作，直到把根节点操作完毕。由于是从下层开始调整，总能保证子树满足堆序性，所以最后调整完根节点后整棵树就满足了堆序性。<br />  因为先建好树再从下层开始调整，所以第 <spanclass="math inline">\(i\)</span> 层的单个节点的下滤次数最多为 <spanclass="math inline">\(h - i\)</span>，而第 <spanclass="math inline">\(i\)</span> 层最多有 <spanclass="math inline">\(2^{i - 1}\)</span>个节点。经过数列求和计算出向上建堆法的时间复杂度为 <spanclass="math inline">\(O(n)\)</span>。<br /><span class="math display">\[\sum_{i=1}^{h - 1}2^{i-1}(h-i)=O(n)\]</span>，其中 <span class="math inline">\(h = \log n+ 1\)</span>。</p><p><strong>优先队列</strong></p><p>  优先队列本质上就是堆。优先队列的入队和出队操作对应了下滤和上滤。<br />  以大根堆优先队列为例，无论入队顺序如何，每次出队元素必定是当前队列中的最大元素。<br /></p><ul><li>出队：直接弹出根节点，然后把最后一个元素补到根节点的空位，然后进行下滤操作从而保证堆序性。</li><li>入队：就是向下建堆过程，把新元素添加到最后一位，然后进行上滤操作从而保证堆序性。</li></ul>          </div><h3 id="操作-6">操作</h3><ul><li><p><strong>小根堆排升序</strong><br />把原始数组建成小根堆（升序优先队列），然后依次弹出根节点，则自然形成了升序序列。（需要额外数组空间用来放置弹出的元素）</p></li><li><p><strong>大根堆排升序</strong><br />考虑到空间复杂度，实际上更常用大根堆来排升序。具体实现方法如下：</p><ul><li>把原始数组建成大根堆；</li><li>把最后一个节点与根节点交换，此时认为新的末节点已经排好序（虽然还放在树里但不再参与后续操作），然后通过下滤操作调整堆；</li><li>把倒数第二个节点与根节点交换，重复上述操作；</li><li>重复上述操作，直到根节点也排好序。</li></ul><p>  经过上述操作后，整棵树的层序遍历就是升序数组。实际上整个流程是在原始数组上完成的，即完成操作后数组会自然排好序。</p></li></ul><h3 id="时空复杂度-5">时空复杂度</h3><p>  由于要遍历所有节点，同时每次都要重新调整堆（时间复杂度 <spanclass="math inline">\(O(\logn)\)</span>），因此堆排序在最好和最坏情况下的时间复杂度都是 <spanclass="math inline">\(O(n \log n)\)</span>。<br />  由于操作在原始数组上完成，不需要引入额外空间，因此空间复杂度为 <spanclass="math inline">\(O(1)\)</span>。</p><h3 id="稳定性-5">稳定性</h3><p>  堆排序是不稳定的。</p><h3 id="代码样例-6">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        heapSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 首先向上建堆法把原始数组建成大根堆</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (nums.length - <span class="hljs-number">1</span> - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            heapify(nums, len, i);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 交换根节点和末元素，并重新构造堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>            nums[<span class="hljs-number">0</span>] = nums[i];<br>            nums[i] = temp;<br>            heapify(nums, i, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 建大根堆的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> rootIdx)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">largeIdx</span> <span class="hljs-operator">=</span> rootIdx;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftIdx</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * rootIdx + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightIdx</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * rootIdx + <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-comment">// 如果孩子比父节点大，则记录下孩子的索引</span><br>        <span class="hljs-keyword">if</span> (leftIdx &lt; len &amp;&amp; nums[leftIdx] &gt; nums[largeIdx]) &#123;<br>            largeIdx = leftIdx;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rightIdx &lt; len &amp;&amp; nums[rightIdx] &gt; nums[largeIdx]) &#123;<br>            largeIdx = rightIdx;<br>        &#125;<br>        <span class="hljs-comment">// 如果大值的索引不是父节点索引，表明发生需要交换父节点和子节点的值</span><br>        <span class="hljs-keyword">if</span> (largeIdx != rootIdx) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[rootIdx];<br>            nums[rootIdx] = nums[largeIdx];<br>            nums[largeIdx] = temp;<br>            <span class="hljs-comment">// 父节点的值下滤了，继续操作该值</span><br>            heapify(nums, len, largeIdx);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线性时间复杂度——非比较式排序</p></blockquote><h2 id="计数排序counting-sort">计数排序（Counting Sort）</h2><div class="note note-warning">            <p>  因为需要统计每个元素出现次数，因此得名“计数排序”。</p>          </div><h3 id="操作-7">操作</h3><p>  计数排序的思想是构建“数值-出现次数”的键值对，把原始数组的值作为辅助数组的索引，把相应数值的出现次数作为辅助数组的值，从而借助数组索引的有序性，通过一轮遍历辅助数组自然而然地完成排序。<br />  考虑到1.数据中出现负数以及空间浪费；2.数据中存在多个相同的数时算法不稳定这两个问题，需要对原始数据进行映射，并且用累计次数替代单个值出现次数（把相同值元素看作不同）。<br /></p><ul><li>首先找出待排序的数组中最大和最小的元素，把数据范围映射为数组索引；</li><li>计算统计数组<code>count[]</code>：统计原始数组中每个值为<code>num</code>的元素出现的次数作为<code>count[num - min]</code>；</li><li>计算累加数组<code>sumCount[]</code>：对所有的计数累加，<code>sumCount[i]</code>表示<code>count[0 ~ i]</code>之和；</li><li>反向填充目标数组<code>sortedArray[]</code>：倒序遍历<code>nums</code>，将元素<code>num</code>放在数组<code>sortedArray[]</code>的第<code>sumCount[num - min]</code>项，每放一个元素就将<code>sumCount[num - min]</code>减去1。</li></ul><h3 id="时空复杂度-6">时空复杂度</h3><p>  本质上是空间换时间。由于只需要单层遍历大小为 <spanclass="math inline">\(n\)</span> 的原始数组和大小为极差 <spanclass="math inline">\(m\)</span> 的辅助数组，所以计数排序的时间复杂度为<span class="math inline">\(O(n + m)\)</span>。<br />  计数排序是非比较排序，因此速度快于任何比较式排序。<br />  由于需要额外使用长度取决于数据极差的数组空间，因此计数排序的空间复杂度为<spanclass="math inline">\(O(m)\)</span>。如果原始数据的极差过大，则需要大量的速度和内存。</p><h3 id="稳定性-6">稳定性</h3><p>  计数排序原本是不稳定的，但把<code>count[]</code>改成<code>sumCount[]</code>就稳定了。</p><h3 id="代码样例-7">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-type">int</span>[] result = countingSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(result[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] countingSort(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-comment">// 找出数组的最值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>], min = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; max) max = nums[i];<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; min) min = nums[i];<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> max - min + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 统计元素出现次数</span><br>        <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            count[nums[i] - min]++;<br>        &#125;<br>        <span class="hljs-comment">// 累加次数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            count[i] += count[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">// 反解出排好序的数组</span><br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            result[--count[nums[i] - min]] = nums[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="桶排序bucket-sort计数排序的升级版">桶排序（BucketSort）——计数排序的升级版</h2><div class="note note-warning">            <p>  把原始数据分散到一系列“桶”内，分别在桶内完成排序，从而整体有序。因此得名“桶排序”。</p>          </div><h3 id="操作-8">操作</h3><p>  桶排序假设原始数据均匀分布，则将这些数据均匀分配到多个桶中，每个桶内分别排序，最后把每个桶的数据拼接起来。为此，对于并不均匀的原始数据，需要通过函数映射使其均匀。<br /></p><ul><li>根据原始数据分布确定桶的大小和个数，设置一个链表数组当作空桶数组；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序。既可以使用其他排序方法，也可以递归桶排序；</li><li>从不是空的桶里把排好序的数据依次拼接起来。</li></ul><h3 id="时空复杂度-7">时空复杂度</h3><p>  由于桶排序需要单层遍历原始数组和所有桶，所以桶排序的时间复杂度为<span class="math inline">\(O(n + m)\)</span>。<br />  最坏的情况下，如果数据分布极不均匀（所有数据全部落到一个桶内），则时间复杂度为<span class="math inline">\(O(n^{2})\)</span>。<br />  由于需要额外使用长度为 <span class="math inline">\(m\)</span>的链表数组，并且所有桶的空位之和就是 <spanclass="math inline">\(n\)</span>, 因此桶排序的空间复杂度为 <spanclass="math inline">\(O(n + m)\)</span>。</p><h3 id="稳定性-7">稳定性</h3><p>  因为相等的元素必然落在同一个桶里并且保持入桶顺序，所以桶排序是稳定的。</p><h3 id="代码样例-8">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        bucketSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bucketSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 递归终止条件</span><br>        <br>        <span class="hljs-comment">// 找出数组的最值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>], min = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; max) max = nums[i];<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; min) min = nums[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (max == min) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果桶里元素全部相同，直接返回</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">bucketSize</span> <span class="hljs-operator">=</span> (max - min) / nums.length + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bucketNum</span> <span class="hljs-operator">=</span> (max - min) / bucketSize + <span class="hljs-number">1</span>;<br>        List&lt;Integer&gt;[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[bucketNum];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            buckets[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 遍历原始数组，把元素放进相应的桶中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (num - min) / bucketSize;<br>            buckets[index].add(num);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 在每个桶内分别排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            <span class="hljs-comment">//buckets[i].sort(null);</span><br>            <span class="hljs-keyword">if</span> (buckets[i].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                bucketSort(buckets[i].stream().mapToInt(x -&gt; x).toArray());<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 把各个桶里的元素依次放回原来的数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : buckets[i]) &#123;<br>                nums[idx++] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基数排序radix-sort桶排序的拓展">基数排序（RadixSort）——桶排序的拓展</h2><div class="note note-warning">            <p>  由于采用基数作为“桶”，所以得名“基数排序”。</p>          </div><h3 id="操作-9">操作</h3><p>  基数排序采用了编号为0~9的10个桶，从低位向高位依次进行桶排序。由于每个桶的大小都是1，所以免去了桶内排序。直到所有位次都排完序后，依次输出桶内结果就是有序数组。</p><ul><li>取得原始数组<code>nums</code>中的最大数，并取得位数 <spanclass="math inline">\(k\)</span>，这就是需要进行桶排序的轮数；</li><li>从最低位开始依据位上的数进行桶排序；</li><li>比较 <span class="math inline">\(k\)</span>轮，直至对最高位完成排序。</li></ul><h3 id="时空复杂度-8">时空复杂度</h3><p>  由于基数排序需要 <span class="math inline">\(k\)</span>轮遍历原始数据，所以基数排序的时间复杂度为 <spanclass="math inline">\(O(n \times k)\)</span>。<br />  最坏情况下，基数排序的时间复杂度仍为 <span class="math inline">\(O(n\times k)\)</span>。<br />  由于需要额外使用长度为 <span class="math inline">\(m\)</span>链表数组作为桶，并且所有桶的空位之和就是 <spanclass="math inline">\(n\)</span>, 因此基数排序的空间复杂度为 <spanclass="math inline">\(O(n + m)\)</span>。其中 <spanclass="math inline">\(m\)</span> 为基数也就是桶的个数，一般为10。</p><h3 id="稳定性-8">稳定性</h3><p>  基数排序是稳定的。</p><h3 id="代码样例-9">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        radixSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 找出数组中的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num &gt; max) max = num;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 求出最大值的位数（0也要认为是1位数）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">digitLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot;&quot;</span>).length();<br>        <br>        <span class="hljs-comment">// 定义10个桶</span><br>        List&lt;Integer&gt;[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            buckets[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 经过m轮排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; k &lt; digitLength; k++, n *= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 每一轮都根据相应位上的数进行分桶</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">digit</span> <span class="hljs-operator">=</span> nums[i] / n % <span class="hljs-number">10</span>;<br>                buckets[digit].add(nums[i]);<br>            &#125;<br>            <span class="hljs-comment">// 按照桶的顺序依次取出数据，填入原始数组，完成一轮排序</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : buckets[i]) &#123;<br>                    nums[index++] = j;<br>                &#125;<br>                buckets[i].clear();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java各种数据类型的常用api</title>
    <link href="/2024/10/08/java-api/"/>
    <url>/2024/10/08/java-api/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>本文总结了Java中常用的处理各种数据类型的内置api。</p>          </div><span id="more"></span><h2 id="数组array">数组Array</h2><ul><li>求长度 <code>nums.length</code></li><li>升序重排 <code>Arrays.sort(nums)</code></li><li>填充数组 <code>Arrays.fill(nums, val)</code></li><li>转化为字符串 <code>Arrays.toString(nums)</code></li><li>将多维数组转化为字符串 <code>Arrays.deepToString(nums)</code></li><li>转化为链表 <code>new LinkedList(Arrays.asList(nums))</code></li><li>字符串数组转化为字符串 <code>new String(chars)</code></li><li>判断数组元素相同 <code>Arrays.equals(nums1, nums2)</code></li></ul><h2 id="字符串string">字符串String</h2><ul><li>求长度 <code>str.length()</code></li><li>以<code>regex</code>分割字符串为数组<code>str.split(regex)</code></li><li>查找目标字符（串）（找不到返回-1） <code>str.indexOf(c)</code><code>str.lastIndexOf(c)</code> <code>str.indexOf(subStr)</code><code>str.lastIndexOf(subStr)</code></li><li>判断字符串相同 <code>strA.equals(strB)</code></li><li>比较字符串的字典序 <code>strA.compareTo(strB)</code></li><li>判断是否以目标前缀开头 <code>str.startsWith(prefix)</code></li><li>判断是否以目标后缀结尾 <code>str.endsWith(suffix)</code></li><li>去除首尾空格 <code>str.trim()</code></li><li>全小写 <code>str.toLowerCase()</code></li><li>全大写 <code>str.toUpperCase()</code></li><li>替换字符 <code>str.replace(oldChar, newChar)</code></li><li>替换字符串 <code>str.replace(oldRegex, newRegex)</code></li><li>获取从<code>[start, end - 1]</code>的子串<code>str.substring(start, end)</code></li><li>获取第i个字符 <code>str.charAt(i)</code></li><li>转化为字符数组 <code>str.toCharArray()</code></li><li>转化为StringBuilder <code>new StringBuilder(str)</code></li><li>转化为整数 <code>Integer.parseInt(str)</code><code>Integer.valueOf(str)</code></li><li>数字转化为字符串 <code>String.valueOf(num)</code></li></ul><h2 id="字符串stringbuilder">字符串StringBuilder</h2><ul><li>在末尾添加新字符（串） <code>sb.append(c)</code><code>sb.append(str)</code></li><li>删除第i个字符 <code>sb.deleteCharAt(i)</code></li><li>删除从<code>[start, end - 1]</code>的子串<code>sb.delete(start, end)</code></li><li>替换第i个字符 <code>sb.setCharAt(i, newChar)</code></li><li>替换从<code>[start, end - 1]</code>的子串<code>sb.replace(start, end, str)</code></li><li>在第i个字符之前插入字符串 <code>sb.insert(i, str)</code></li><li>反转字符串 <code>sb.reverse()</code></li><li>转化为String <code>sb.toString()</code></li></ul><h2 id="链表list">链表List</h2><ul><li>末尾添加元素 <code>list.add(element)</code></li><li>获取第i个位置的元素 <code>list.get(i)</code></li><li>替换第i个位置的元素 <code>list.set(i, newElement)</code></li><li>删除第i个位置的元素 <code>list.remove(i)</code></li><li>删除最后一个元素 <code>linkedList.removeLast()</code></li><li>求长度 <code>list.size()</code></li><li>判断是否为空 <code>list.isEmpty()</code></li><li>清空 <code>list.clear()</code></li><li>判断是否包含某元素 <code>list.contains(object)</code></li><li>查找元素（找不到返回-1） <code>list.indexOf(object)</code><code>list.lastIndexOf(object)</code></li><li>转化为集合 <code>new HashSet&lt;&gt;(list)</code></li><li>转化为整数数组<code>list.stream().mapToInt(x -&gt; x).toArray()</code><code>list.stream().mapToInt(Integer::intValue).toArray()</code></li><li>转化为字符串数组<code>(String[]) list.toArray(new String [0])</code></li></ul><h2 id="栈stack">栈Stack</h2><ul><li>压入栈顶 <code>stk.push(element)</code></li><li>从栈顶弹出 <code>stk.pop()</code></li><li>查看栈顶元素 <code>stk.peek()</code></li><li>求长度 <code>stk.size()</code></li><li>判断是否为空 <code>stk.isEmpty()</code><code>stk.empty()</code></li></ul><h2 id="单端队列queue">单端队列Queue</h2><ul><li>从队尾添加元素 失败会抛异常<code>queue.add(element)</code>失败会返回false<code>queue.offer(element)</code></li><li>从队头移除元素 空指针会抛异常<code>queue.remove()</code>空指针会返回null<code>queue.poll()</code></li><li>查看队头元素 空指针会抛异常<code>queue.element()</code>空指针会返回null<code>queue.peek()</code></li><li>求长度 <code>queue.size()</code></li><li>判断是否为空 <code>queue.isEmpty()</code></li><li>清空 <code>queue.clear()</code></li><li>判断是否包含某元素 <code>queue.contains(object)</code></li></ul><h2 id="双端队列deque">双端队列Deque</h2><ul><li>从队尾添加元素 失败会抛异常<code>deque.addLast(element)</code>失败会返回false<code>deque.offerLast(element)</code></li><li>从队头添加元素 失败会抛异常<code>deque.addFirst(element)</code><code>deque.push()</code>失败会返回false<code>deque.offerFirst(element)</code></li><li>从队尾删除元素 空指针会抛异常<code>deque.removeLast()</code>空指针会返回null<code>deque.pollLast()</code></li><li>从队头删除元素 空指针会抛异常<code>deque.removeFirst()</code><code>deque.pop()</code>空指针会返回null<code>deque.pollFirst()</code></li><li>查看队尾元素 空指针会抛异常<code>deque.getLast()</code>空指针会返回null<code>deque.peekLast()</code></li><li>查看队头元素 空指针会抛异常<code>deque.getFirst()</code>空指针会返回null<code>deque.peekFirst()</code></li><li>求长度 <code>deque.size()</code></li><li>判断是否为空 <code>deque.isEmpty()</code></li><li>清空 <code>deque.clear()</code></li></ul><h2 id="集合set">集合Set</h2><ul><li>添加元素 <code>set.add(element)</code></li><li>删除元素 <code>set.remove(element)</code></li><li>判断是否包含某元素 <code>set.contains(object)</code></li><li>求长度 <code>set.size()</code></li><li>清空 <code>set.clear()</code></li><li>获取不小于key的最小元素（空指针返回null）<code>treeSet.ceiling(key)</code></li><li>获取不大于key的最大元素（空指针返回null）<code>treeSet.floor(key)</code></li><li>获取第一个元素 <code>treeSet.first()</code></li><li>获取最后一个元素 <code>treeSet.last()</code></li><li>转化为整数数组<code>set.stream().mapToInt(x -&gt; x).toArray()</code></li></ul><h2 id="映射map">映射Map</h2><ul><li>添加或修改键值对 <code>map.put(key, val)</code></li><li>删除键值对 <code>map.remove(key)</code></li><li>获取指定键对应的值 <code>map.get(key)</code></li><li>获取指定键对应的值（如果不存在，则设定默认值）<code>map.getOrDefault(key, defaultVal)</code></li><li>判断是否包含某个键 <code>map.containsKey(key)</code></li><li>判断是否包含某个值 <code>map.containsValue(val)</code></li><li>判断是否为空 <code>map.isEmpty()</code></li><li>求长度 <code>map.size()</code></li><li>清空 <code>map.clear()</code></li><li>生成对应的键值对集合 <code>map.entrySet()</code></li><li>获取不小于key的最小元素（空指针返回null）<code>treeMap.ceilingEntry(key)</code></li><li>获取不大于key的最大元素（空指针返回null）<code>treeMap.floorEntry(key)</code></li><li>获取第一个键 <code>treeMap.firstKey()</code></li><li>获取最后一个键 <code>treeMap.lastKey()</code></li></ul><h2 id="键值对map.entry">键值对Map.Entry</h2><ul><li>获取键值对的键 <code>entry.getKey()</code></li><li>获取键值对的值 <code>entry.getValue()</code></li><li>修改键值对的值 <code>entry.setValue(val)</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/07/hello-world/"/>
    <url>/2024/10/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
